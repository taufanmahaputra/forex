// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/rate.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/taufanmahaputra/forex/pkg/repository"
	reflect "reflect"
)

// MockRateRepositoryItf is a mock of RateRepositoryItf interface
type MockRateRepositoryItf struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepositoryItfMockRecorder
}

// MockRateRepositoryItfMockRecorder is the mock recorder for MockRateRepositoryItf
type MockRateRepositoryItfMockRecorder struct {
	mock *MockRateRepositoryItf
}

// NewMockRateRepositoryItf creates a new mock instance
func NewMockRateRepositoryItf(ctrl *gomock.Controller) *MockRateRepositoryItf {
	mock := &MockRateRepositoryItf{ctrl: ctrl}
	mock.recorder = &MockRateRepositoryItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateRepositoryItf) EXPECT() *MockRateRepositoryItfMockRecorder {
	return m.recorder
}

// GetExchangeRateList mocks base method
func (m *MockRateRepositoryItf) GetExchangeRateList() []repository.ExchangeRate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateList")
	ret0, _ := ret[0].([]repository.ExchangeRate)
	return ret0
}

// GetExchangeRateList indicates an expected call of GetExchangeRateList
func (mr *MockRateRepositoryItfMockRecorder) GetExchangeRateList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateList", reflect.TypeOf((*MockRateRepositoryItf)(nil).GetExchangeRateList))
}

// InsertExchangeRate mocks base method
func (m *MockRateRepositoryItf) InsertExchangeRate(arg0 *repository.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExchangeRate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExchangeRate indicates an expected call of InsertExchangeRate
func (mr *MockRateRepositoryItfMockRecorder) InsertExchangeRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExchangeRate", reflect.TypeOf((*MockRateRepositoryItf)(nil).InsertExchangeRate), arg0)
}

// DeleteExchangeRateByID mocks base method
func (m *MockRateRepositoryItf) DeleteExchangeRateByID(arg0 *repository.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchangeRateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchangeRateByID indicates an expected call of DeleteExchangeRateByID
func (mr *MockRateRepositoryItfMockRecorder) DeleteExchangeRateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchangeRateByID", reflect.TypeOf((*MockRateRepositoryItf)(nil).DeleteExchangeRateByID), arg0)
}

// GetExchangeRateIDByCurrencyPair mocks base method
func (m *MockRateRepositoryItf) GetExchangeRateIDByCurrencyPair(arg0 *repository.ExchangeRate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateIDByCurrencyPair", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateIDByCurrencyPair indicates an expected call of GetExchangeRateIDByCurrencyPair
func (mr *MockRateRepositoryItfMockRecorder) GetExchangeRateIDByCurrencyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateIDByCurrencyPair", reflect.TypeOf((*MockRateRepositoryItf)(nil).GetExchangeRateIDByCurrencyPair), arg0)
}
