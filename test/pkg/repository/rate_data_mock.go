// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/rate_data.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/taufanmahaputra/forex/pkg/repository"
	reflect "reflect"
)

// MockRateDataRepositoryItf is a mock of RateDataRepositoryItf interface
type MockRateDataRepositoryItf struct {
	ctrl     *gomock.Controller
	recorder *MockRateDataRepositoryItfMockRecorder
}

// MockRateDataRepositoryItfMockRecorder is the mock recorder for MockRateDataRepositoryItf
type MockRateDataRepositoryItfMockRecorder struct {
	mock *MockRateDataRepositoryItf
}

// NewMockRateDataRepositoryItf creates a new mock instance
func NewMockRateDataRepositoryItf(ctrl *gomock.Controller) *MockRateDataRepositoryItf {
	mock := &MockRateDataRepositoryItf{ctrl: ctrl}
	mock.recorder = &MockRateDataRepositoryItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateDataRepositoryItf) EXPECT() *MockRateDataRepositoryItfMockRecorder {
	return m.recorder
}

// InsertDailyExchangeRateData mocks base method
func (m *MockRateDataRepositoryItf) InsertDailyExchangeRateData(arg0 *repository.ExchangeRate, arg1 *repository.ExchangeRateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDailyExchangeRateData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDailyExchangeRateData indicates an expected call of InsertDailyExchangeRateData
func (mr *MockRateDataRepositoryItfMockRecorder) InsertDailyExchangeRateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDailyExchangeRateData", reflect.TypeOf((*MockRateDataRepositoryItf)(nil).InsertDailyExchangeRateData), arg0, arg1)
}

// GetExchangeRateDataByExchangeRateIDAndDate mocks base method
func (m *MockRateDataRepositoryItf) GetExchangeRateDataByExchangeRateIDAndDate(arg0 *repository.ExchangeRateData) *repository.ExchangeRateData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateDataByExchangeRateIDAndDate", arg0)
	ret0, _ := ret[0].(*repository.ExchangeRateData)
	return ret0
}

// GetExchangeRateDataByExchangeRateIDAndDate indicates an expected call of GetExchangeRateDataByExchangeRateIDAndDate
func (mr *MockRateDataRepositoryItfMockRecorder) GetExchangeRateDataByExchangeRateIDAndDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateDataByExchangeRateIDAndDate", reflect.TypeOf((*MockRateDataRepositoryItf)(nil).GetExchangeRateDataByExchangeRateIDAndDate), arg0)
}

// GetSevenSpecificExchangeRateData mocks base method
func (m *MockRateDataRepositoryItf) GetSevenSpecificExchangeRateData(arg0 *repository.ExchangeRate) []repository.ExchangeRateData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSevenSpecificExchangeRateData", arg0)
	ret0, _ := ret[0].([]repository.ExchangeRateData)
	return ret0
}

// GetSevenSpecificExchangeRateData indicates an expected call of GetSevenSpecificExchangeRateData
func (mr *MockRateDataRepositoryItfMockRecorder) GetSevenSpecificExchangeRateData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSevenSpecificExchangeRateData", reflect.TypeOf((*MockRateDataRepositoryItf)(nil).GetSevenSpecificExchangeRateData), arg0)
}

// GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate mocks base method
func (m *MockRateDataRepositoryItf) GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate(arg0 *repository.ExchangeRateData) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate indicates an expected call of GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate
func (mr *MockRateDataRepositoryItfMockRecorder) GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate", reflect.TypeOf((*MockRateDataRepositoryItf)(nil).GetSevenDaysAverageExchangeRateDataByExchangeRateIDAndDate), arg0)
}
